name: Label-based Deployment

on:
  pull_request:
    types: [labeled]

jobs:
  check-labels:
    name: Check deployment labels
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      provider: ${{ steps.check.outputs.provider }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Check for deployment labels
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l => l.name);
            console.log('PR Labels:', labels);

            // Check for deployment labels
            const deployLabels = labels.filter(l => l.startsWith('deploy:'));

            if (deployLabels.length === 0) {
              console.log('No deployment labels found');
              core.setOutput('should_deploy', 'false');
              return;
            }

            // Parse deployment label (format: deploy:provider:environment)
            // Examples: deploy:aws:staging, deploy:gcp:production
            const deployLabel = deployLabels[0];
            const parts = deployLabel.split(':');

            if (parts.length !== 3) {
              core.setFailed(`Invalid deployment label format: ${deployLabel}. Expected format: deploy:provider:environment`);
              return;
            }

            const provider = parts[1];
            const environment = parts[2];

            // Validate provider
            if (!['aws', 'gcp'].includes(provider)) {
              core.setFailed(`Invalid provider: ${provider}. Must be 'aws' or 'gcp'`);
              return;
            }

            // Validate environment
            if (!['staging', 'production'].includes(environment)) {
              core.setFailed(`Invalid environment: ${environment}. Must be 'staging' or 'production'`);
              return;
            }

            console.log(`Deployment requested: ${provider} / ${environment}`);
            core.setOutput('should_deploy', 'true');
            core.setOutput('provider', provider);
            core.setOutput('environment', environment);

  deploy:
    name: Deploy to ${{ needs.check-labels.outputs.provider }}
    needs: check-labels
    if: needs.check-labels.outputs.should_deploy == 'true'
    uses: ./.github/workflows/deploy.yml
    with:
      provider: ${{ needs.check-labels.outputs.provider }}
      environment: ${{ needs.check-labels.outputs.environment }}
      manifest_path: 'deploy-manifest.yaml'  # Customize this path as needed
      command: 'deploy'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      GCP_BILLING_ACCOUNT_ID: ${{ secrets.GCP_BILLING_ACCOUNT_ID }}

  remove-label:
    name: Remove deployment label
    needs: [check-labels, deploy]
    runs-on: ubuntu-latest
    if: always() && needs.check-labels.outputs.should_deploy == 'true'
    steps:
      - name: Remove deployment label
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l => l.name);
            const deployLabel = labels.find(l => l.startsWith('deploy:'));

            if (deployLabel) {
              console.log(`Removing label: ${deployLabel}`);
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                name: deployLabel
              });
            }
